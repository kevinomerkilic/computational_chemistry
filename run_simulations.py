import os
import shutil
import subprocess
import time
from multiprocessing import Pool
from pathlib import Path

# === CONFIGURATION === #

# Path to the template input file
TEMPLATE_INP = "/Users/kevinomerkilic/Desktop/MezCal/examples/Argon/Sphere/GCMC/darkblue.inp"

# Temporary input file path (will be overwritten for each run)
TEMP_INP = "/Users/kevinomerkilic/Desktop/MezCal/temp.inp"

# Path to the MezCal directory (where make and simulate run)
MEZCAL_DIR = "/Users/kevinomerkilic/Desktop/MezCal"

# Path to the desired output directory for saved logs
OUTPUT_DIR = "/Users/kevinomerkilic/Desktop/Molecular Simulation Materials/Simulation Logs - Notes - Reports/LOGS"

# VDW interaction strength for Darkblue geometry
vdw_settings = { "Darkblue": 171.24 }

# 18 scaled pore sizes (each = nm Ã— 10, rounded to 3 sig figs)
scaled_pore_sizes = [
    89.706, 80.000, 69.914, 65.067, 59.951, 54.955, 50.000, 47.471, 45.018,
    42.509, 40.000, 37.481, 35.007, 32.490, 30.012, 27.477, 25.000, 22.488
]

# === FUNCTIONS === #

def modify_inp_file(size_value, vdw_value, label):
    """
    Modifies a copy of the template .inp file with updated Size, vdwParams, and ProjectName.
    Saves the modified file as temp.inp.
    """
    with open(TEMPLATE_INP, "r") as file:
        lines = file.readlines()

    # Update necessary lines (note: line numbers are zero-based)
    lines[2] = f"ProjectName Ar_Spherical_{label};\n"         # Line 3
    lines[23] = f"Size {size_value};\n"                       # Line 24
    lines[29] = f"Box0 Ar vdwParams {vdw_value} 3.0;\n"       # Line 30

    with open(TEMP_INP, "w") as file:
        file.writelines(lines)

def run_simulation(pore_size):
    """
    Runs a single MezCal simulation for a given pore size.
    """
    label = f"Darkblue_{pore_size}nm"
    project_name = f"Ar_Spherical_{label}"

    # Step 1: Modify input file
    modify_inp_file(size_value=pore_size, vdw_value=vdw_settings["Darkblue"], label=label)

    # Step 2: Run simulation with the updated temp.inp
    subprocess.run(["./simulate", "temp.inp"], cwd=MEZCAL_DIR)

    # Step 3: Locate the output log file generated by MezCal
    log_folder = Path(MEZCAL_DIR) / "ar_spherical_nanopore" / project_name.lower()
    source_log = log_folder / "simulation_ar.log"

    # Step 4: Define and create destination folder
    output_path = Path(OUTPUT_DIR) / label
    output_path.mkdir(parents=True, exist_ok=True)

    # Step 5: Copy log to destination and clean up intermediate folder
    if source_log.exists():
        shutil.copy(source_log, output_path / "simulation_ar.log")
        shutil.rmtree(log_folder)
    else:
        print(f"[!] Log file not found at {source_log}")

def worker_wrapper(args):
    """
    Wrapper to introduce a staggered delay before launching each worker process.
    """
    time.sleep(args[0])
    run_simulation(args[1])

# === MAIN EXECUTION === #

def main():
    # Compile MezCal only once before starting the simulations
    subprocess.run(["make", "clean"], cwd=MEZCAL_DIR)
    subprocess.run(["make"], cwd=MEZCAL_DIR)

    # Prepare (delay, pore_size) arguments for parallel execution
    args_list = [(i * 60, size) for i, size in enumerate(scaled_pore_sizes)]

    # Run simulations with up to 5 processes in parallel, 1 minute apart
    with Pool(processes=5) as pool:
        pool.map(worker_wrapper, args_list)

if __name__ == "__main__":
    main()
